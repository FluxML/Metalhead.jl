[{"body":"Arguments nclasses : the number of output classes inception3  does not currently support pretrained weights .","id":"docstrings/Metalhead.inception3.html#arguments"},{"body":"Arguments: inplanes : the number of input feature maps outplanes : a list of the number of output feature maps for each convolution within the residual block downsample : set to  true  to downsample the input","id":"docstrings/Metalhead.bottleneck.html#arguments"},{"body":"Arguments ifilters : number of input feature maps ofilters : number of output feature maps depth : number of convolution/convolution + batch norm layers batchnorm : set to  true  to include batch normalization after each convolution","id":"docstrings/Metalhead.vgg_block.html#arguments"},{"body":"Arguments width_mult : Controls the number of output feature maps in each block (with 1 . 0 being the default in the paper; this is usually a value between 0 . 1 and 1 . 4) configs : a  “ list of tuples ”  configuration for each layer that details: k::Int   -  The size of the convolutional kernel c::Float   -  The multiplier factor for deciding the number of feature maps in the hidden layer t::Int   -  The number of output feature maps for a given block use_se::Bool   -  Whether to use Squeeze and Excitation layer use_hs::Bool   -  Whether to use Hard - Swish activation function s::Int   -  The stride of the convolutional kernel max_width : The maximum number of feature maps in any layer of the network nclasses : the number of output classes","id":"docstrings/Metalhead.mobilenetv3.html#arguments"},{"body":"Arguments cardinality : the number of groups to use for the convolution width : the number of feature maps in each group in the bottleneck widen_factor : the factor by which the width of the bottleneck is increased after each stage connection : the binary function applied to the output of residual and skip paths in a block block_config : a list of the number of residual blocks at each stage nclasses : the number of output classes","id":"docstrings/Metalhead.resnext.html#arguments"},{"body":"Arguments inplanes : number of input feature maps","id":"docstrings/Metalhead.inception_d.html#arguments"},{"body":"Arguments inplanes : number of input feature maps inner_planes : the number of output feature maps within each branch n : the  “ grid size ”  (kernel size) for the convolution layers","id":"docstrings/Metalhead.inception_c.html#arguments"},{"body":"Getting Started You can find the Metalhead . jl getting started guide here: https://fluxml . ai/Metalhead . jl/dev/docs/tutorials/quickstart . html","id":"README.html#getting-started"},{"body":"Arguments channel_config : the growth rate of the output feature maps within a residual block block_config : a list of the number of residual blocks at each stage shortcut_config : the type of shortcut style (either  :A ,  :B , or  :C ) block : a function with input  (inplanes, outplanes, downsample=false)  that returns a new residual block (see  Metalhead.basicblock  and  Metalhead.bottleneck ) nclasses : the number of output classes Create a ResNet model with a specified depth ( reference ) . See also  Metalhead.resnet .","id":"docstrings/Metalhead.ResNet.html#arguments"},{"body":"Installation","id":"README.html#installation"},{"body":"private   dense_block   —   function Create a sequence of DenseNet bottlenecks increasing the number of output feature maps by  growth_rates  with each block ( reference ) .","id":"docstrings/Metalhead.dense_block.html"},{"body":"Arguments block : a function with input  (inplanes, outplanes, downsample=false)  that returns a new residual block (see  Metalhead.basicblock  and  Metalhead.bottleneck ) shortcut_config : the type of shortcut style (either  :A ,  :B , or  :C ) :A : uses a  Metalhead.skip_identity  for all residual blocks :B : uses a  Metalhead.skip_projection  for the first residual block and  Metalhead.skip_identity  for the remaining residual blocks :C : uses a  Metalhead.skip_projection  for all residual blocks connection : the binary function applied to the output of residual and skip paths in a block channel_config : the growth rate of the output feature maps within a residual block block_config : a list of the number of residual blocks at each stage nclasses : the number of output classes","id":"docstrings/Metalhead.resnet.html#arguments-1"},{"body":"private   loadpretrain!   —   function Load the pre - trained weight artifacts matching  <name>.bson  into  model .","id":"docstrings/Metalhead.loadpretrain!.html"},{"body":"Arguments inplanes : the number of input feature maps out_1x1 : the number of output feature maps for the 1x1 convolution (branch 1) red_3x3 : the number of output feature maps for the 3x3 reduction convolution (branch 2) out_3x3 : the number of output feature maps for the 3x3 convolution (branch 2) red_5x5 : the number of output feature maps for the 5x5 reduction convolution (branch 3) out_5x5 : the number of output feature maps for the 5x5 convolution (branch 3) pool_proj : the number of output feature maps for the pooling projection (branch 4)","id":"docstrings/Metalhead._inceptionblock.html#arguments"},{"body":"public   Inception3   —   struct Create an Inception - v3 model ( reference ) . See also  inception3 .","id":"docstrings/Metalhead.Inception3.html"},{"body":"Arguments cardinality : the number of groups to use for the convolution width : the number of feature maps in each group in the bottleneck block_config : a list of the number of residual blocks at each stage nclasses : the number of output classes Create a ResNeXt model with specified configuration .  Currently supported values for  config  are (50, 101) . ( reference ) . Set  pretrain = true  to load the model with pre - trained weights for ImageNet . ResNeXt  does not currently support pretrained weights . See also  Metalhead.resnext .","id":"docstrings/Metalhead.ResNeXt.html#arguments"},{"body":"private   googlenet   —   function Create an Inception - v1 model (commonly referred to as GoogLeNet) ( reference ) .","id":"docstrings/Metalhead.googlenet.html"},{"body":"Arguments inplanes : number of input feature maps","id":"docstrings/Metalhead.inception_e.html#arguments"},{"body":"Arguments pretrain : set to  true  to load pre - trained model weights for ImageNet","id":"docstrings/Metalhead.VGG.html#arguments"},{"body":"Arguments nclasses : the number of output classes","id":"docstrings/Metalhead.googlenet.html#arguments"},{"body":"Name Module Visibility Category  AlexNet   Metalhead   public   struct   DenseNet   Metalhead   public   struct   GoogLeNet   Metalhead   public   struct   Inception3   Metalhead   public   struct   MobileNetv2   Metalhead   public   struct   MobileNetv3   Metalhead   public   struct   ResNeXt   Metalhead   public   struct   ResNet   Metalhead   public   struct   SqueezeNet   Metalhead   public   struct   VGG   Metalhead   public   struct   _inceptionblock   Metalhead   private   function   alexnet   Metalhead   private   function   basicblock   Metalhead   private   function   bottleneck   Metalhead   private   function   cat_channels   Metalhead   private   function   conv_bn   Metalhead   private   function   dense_block   Metalhead   private   function   dense_bottleneck   Metalhead   private   function   densenet   Metalhead   private   function   fire   Metalhead   private   function   googlenet   Metalhead   private   function   inception3   Metalhead   private   function   inception_a   Metalhead   private   function   inception_b   Metalhead   private   function   inception_c   Metalhead   private   function   inception_d   Metalhead   private   function   inception_e   Metalhead   private   function   invertedresidualv2   Metalhead   private   function   invertedresidualv3   Metalhead   private   function   loadpretrain!   Metalhead   private   function   mobilenetv2   Metalhead   private   function   mobilenetv3   Metalhead   private   function   resnet   Metalhead   private   function   resnext   Metalhead   private   function   resnextblock   Metalhead   private   function   selayer   Metalhead   private   function   skip_identity   Metalhead   private   function   skip_projection   Metalhead   private   function   squeezenet   Metalhead   private   function   transition   Metalhead   private   function   vgg   Metalhead   private   function   vgg_block   Metalhead   private   function   vgg_classifier_layers   Metalhead   private   function   vgg_convolutional_layers   Metalhead   private   function   weights   Metalhead   private   function ","id":"docstrings.html#docstring-index"},{"body":"public   MobileNetv3   —   struct Create a MobileNetv3 model with the specified configuration . ( reference ) . Set  pretrain = true  to load the model with pre - trained weights for ImageNet .","id":"docstrings/Metalhead.MobileNetv3.html"},{"body":"private   inception_e   —   function Create an Inception - v3 style - E module (ref: Fig .  7 in  paper ) .","id":"docstrings/Metalhead.inception_e.html"},{"body":"private   inception_a   —   function Create an Inception - v3 style - A module (ref: Fig .  5 in  paper ) .","id":"docstrings/Metalhead.inception_a.html"},{"body":"private   skip_identity   —   function Create a identity projection ( reference ) .","id":"docstrings/Metalhead.skip_identity.html"},{"body":"private   inception3   —   function Create an Inception - v3 model ( reference ) .","id":"docstrings/Metalhead.inception3.html"},{"body":"private   _inceptionblock   —   function Create an inception module for use in GoogLeNet ( reference ) .","id":"docstrings/Metalhead._inceptionblock.html"},{"body":"Arguments inplanes : The number of input feature maps hidden_planes : The number of feature maps in the hidden layer outplanes : The number of output feature maps kernel_size : The kernel size of the convolutional layers stride : The stride of the convolutional kernel, has to be either 1 or 2 use_se : If  true , Squeeze and Excitation layer will be used use_hs : If  true , Hard - Swish activation function will be used","id":"docstrings/Metalhead.invertedresidualv3.html#arguments"},{"body":"public   MobileNetv2   —   struct Create a MobileNetv2 model with the specified configuration . ( reference ) . Set  pretrain  to  true  to load the pretrained weights for ImageNet .","id":"docstrings/Metalhead.MobileNetv2.html"},{"body":"Arguments: inplanes : the number of input feature maps outplanes : the number of output feature maps downsample : this argument is ignored but it is needed for compatibility with  resnet .","id":"docstrings/Metalhead.skip_identity.html#arguments"},{"body":"Keyword Arguments: config  : VGG convolutional block configuration .  It is defined as a vector of tuples  (output_channels, num_convolutions)  for each block inchannels ::Int : number of input channels batchnorm ::Bool : set to  true  to use batch normalization after each convolution nclasses ::Int : number of output classes fcsize : intermediate fully connected layer size (see  Metalhead.vgg_classifier_layers ) dropout : dropout level between fully connected layers Create a VGG style model with specified  depth .  Available values include (11, 13, 16, 19) . ( reference ) . See also  VGG . VGG  does not currently support pretrained weights .","id":"docstrings/Metalhead.VGG.html#keyword-arguments"},{"body":"Arguments pretrain : set to  true  to load pre - trained weights for ImageNet nclasses : the number of output classes","id":"docstrings/Metalhead.AlexNet.html#arguments"},{"body":"private   squeezenet   —   function Create a SqueezeNet ( reference ) .","id":"docstrings/Metalhead.squeezenet.html"},{"body":"private   selayer   —   function Squeeze and Excitation layer used by MobileNetv3 ( reference ) .","id":"docstrings/Metalhead.selayer.html"},{"body":"Arguments imsize : input image width and height as a tuple config : the configuration for the convolution layers (see  Metalhead.vgg_convolutional_layers ) inchannels : number of input channels batchnorm : set to  true  to use batch normalization after each convolution nclasses : number of output classes fcsize : intermediate fully connected layer size (see  Metalhead.vgg_classifier_layers ) dropout : dropout level between fully connected layers","id":"docstrings/Metalhead.vgg.html#arguments"},{"body":"private   mobilenetv2   —   function Create a MobileNetv2 model . ( reference ) .","id":"docstrings/Metalhead.mobilenetv2.html"},{"body":"Arguments mode : :small or :large for the size of the model (see paper) . width_mult : Controls the number of output feature maps in each block (with 1 . 0 being the default in the paper; this is usually a value between 0 . 1 and 1 . 4) pretrain : whether to load the pre - trained weights for ImageNet nclasses : the number of output classes See also  Metalhead.mobilenetv3 .","id":"docstrings/Metalhead.MobileNetv3.html#arguments"},{"body":"private   bottleneck   —   function Create a bottleneck residual block ( reference ) .","id":"docstrings/Metalhead.bottleneck.html"},{"body":"Arguments inplanes : number of input feature maps to the full sequence growth_rates : the growth (additive) rates of output feature maps after each block (a vector of  k s from the ref)","id":"docstrings/Metalhead.dense_block.html#arguments"},{"body":"private   inception_b   —   function Create an Inception - v3 style - B module (ref: Fig .  10 in  paper ) .","id":"docstrings/Metalhead.inception_b.html"},{"body":"Arguments imsize : tuple  (width, height, channels)  indicating the size after the convolution layers (see  Metalhead.vgg_convolutional_layers ) nclasses : number of output classes fcsize : input and output size of the intermediate fully connected layer dropout : the dropout level between each fully connected layer","id":"docstrings/Metalhead.vgg_classifier_layers.html#arguments"},{"body":"private   inception_d   —   function Create an Inception - v3 style - D module (ref:  pytorch ) .","id":"docstrings/Metalhead.inception_d.html"},{"body":"Arguments inplanes : number of input feature maps squeeze_planes : number of intermediate feature maps expand1x1_planes : number of output feature maps for the 1x1 expansion convolution expand3x3_planes : number of output feature maps for the 3x3 expansion convolution","id":"docstrings/Metalhead.fire.html#arguments"},{"body":"Arguments width_mult : Controls the number of output feature maps in each block (with 1 . 0 being the default in the paper) configs : A  “ list of tuples ”  configuration for each layer that details: t : The expansion factor that controls the number of feature maps in the bottleneck layer c : The number of output feature maps n : The number of times a block is repeated s : The stride of the convolutional kernel max_width : The maximum number of feature maps in any layer of the network nclasses : The number of output classes","id":"docstrings/Metalhead.mobilenetv2.html#arguments"},{"body":"private   cat_channels   —   function Concatenate  x  and  y  along the channel dimension (third dimension) . Equivalent to  cat(x, y; dims=3) . Convenient binary reduction operator for use with  Parallel .","id":"docstrings/Metalhead.cat_channels.html"},{"body":"private   mobilenetv3   —   function Create a MobileNetv3 model . ( reference ) .","id":"docstrings/Metalhead.mobilenetv3.html"},{"body":"Metalhead Dev CI Coverage Metalhead . jl  provides standard machine learning vision models for use with  Flux . jl .  The architectures in this package make use of pure Flux layers, and they represent the best - practices for creating modules like residual blocks, inception blocks, etc .  in Flux .","id":"README.html#metalhead"},{"body":"Arguments nclasses : the number of output classes","id":"docstrings/Metalhead.alexnet.html#arguments"},{"body":"private   dense_bottleneck   —   function Create a Densenet bottleneck layer ( reference ) .","id":"docstrings/Metalhead.dense_bottleneck.html"},{"body":"Arguments: inplanes : the number of input feature maps outplanes : the number of output feature maps downsample : set to  true  to downsample the input","id":"docstrings/Metalhead.skip_projection.html#arguments"},{"body":"private   vgg   —   function Create a VGG model ( reference ) .","id":"docstrings/Metalhead.vgg.html"},{"body":"public   ResNeXt   —   struct Create a ResNeXt model ( reference ) .","id":"docstrings/Metalhead.ResNeXt.html"},{"body":"Arguments inplanes : number of input feature maps outplanes : number of output feature maps","id":"docstrings/Metalhead.transition.html#arguments"},{"body":"private   densenet   —   function Create a DenseNet model ( reference ) .","id":"docstrings/Metalhead.densenet.html"},{"body":"private   invertedresidualv2   —   function Create a basic inverted residual block for MobileNetv2 ( reference ) .","id":"docstrings/Metalhead.invertedresidualv2.html"},{"body":"public   GoogLeNet   —   struct Create an Inception - v1 model (commonly referred to as  GoogLeNet ) ( reference ) .","id":"docstrings/Metalhead.GoogLeNet.html"},{"body":"Arguments pretrain : set to  true  to load the pre - trained weights for ImageNet nclasses : the number of output classes Inception3  does not currently support pretrained weights .","id":"docstrings/Metalhead.Inception3.html#arguments"},{"body":"Arguments depth : depth of the ResNet model .  Options include (18, 34, 50, 101, 152) . nclasses : the number of output classes Only  ResNet(50)  currently supports pretrained weights .","id":"docstrings/Metalhead.ResNet.html#arguments-1"},{"body":"Arguments inplanes : The number of input feature maps outplanes : The number of output feature maps stride : The stride of the convolutional layer, has to be either 1 or 2 expand_ratio : The ratio of the inner bottleneck feature maps over the input feature maps","id":"docstrings/Metalhead.invertedresidualv2.html#arguments"},{"body":"Arguments nblocks : number of dense blocks between transitions growth_rate : the output feature map growth rate of dense blocks (i . e .   k  in the ref) reduction : the factor by which the number of feature maps is scaled across each transition nclasses : the number of output classes","id":"docstrings/Metalhead.densenet.html#arguments-1"},{"body":"private   basicblock   —   function Create a basic residual block ( reference ) .","id":"docstrings/Metalhead.basicblock.html"},{"body":"Available models Model Name Function Pre - trained?  VGG - 11  VGG11  N VGG - 11 (w/ BN)  VGG11  N VGG - 13  VGG13  N VGG - 13 (w/ BN)  VGG13  N VGG - 16  VGG16  N VGG - 16 (w/ BN)  VGG16  N VGG - 19  VGG19  N VGG - 19 (w/ BN)  VGG19  N  ResNet - 18  ResNet18  N ResNet - 34  ResNet34  N ResNet - 50  ResNet50  N ResNet - 101  ResNet101  N ResNet - 152  ResNet152  N  GoogLeNet   GoogLeNet  N  Inception - v3   Inception3  N  SqueezeNet   SqueezeNet  N  DenseNet - 121  DenseNet121  N DenseNet - 161  DenseNet161  N DenseNet - 169  DenseNet169  N DenseNet - 201  DenseNet201  N","id":"README.html#available-models"},{"body":"private   weights   —   function Load the pre - trained weights for  model  using the stored artifacts .","id":"docstrings/Metalhead.weights.html"},{"body":"Quickstart Using a model from Metalhead is as simple as selecting a model from the table of  available models .  For example, below we use the ResNet - 50 model with pre - trained weights . Now, we can use this model with Flux like any other model .  Below, we train it on some randomly generated data .","id":"docs/tutorials/quickstart.html#quickstart"},{"body":"private   invertedresidualv3   —   function Create a basic inverted residual block for MobileNetv3 ( reference ) .","id":"docstrings/Metalhead.invertedresidualv3.html"},{"body":"private   skip_projection   —   function Create a skip projection ( reference ) .","id":"docstrings/Metalhead.skip_projection.html"},{"body":"Arguments width_mult : Controls the number of output feature maps in each block (with 1 . 0 being the default in the paper; this is usually a value between 0 . 1 and 1 . 4) pretrain : Whether to load the pre - trained weights for ImageNet nclasses : The number of output classes See also  Metalhead.mobilenetv2 .","id":"docstrings/Metalhead.MobileNetv2.html#arguments"},{"body":"public   DenseNet   —   struct Create a DenseNet model ( reference ) . See also  densenet .","id":"docstrings/Metalhead.DenseNet.html"},{"body":"Arguments inplanes : number of input feature maps outplanes : number of output feature maps on bottleneck branch (and scaling factor for inner feature maps; see ref)","id":"docstrings/Metalhead.dense_bottleneck.html#arguments"},{"body":"private   vgg_classifier_layers   —   function Create VGG classifier (fully connected) layers ( reference ) .","id":"docstrings/Metalhead.vgg_classifier_layers.html"},{"body":"Arguments inplanes : number of input feature maps","id":"docstrings/Metalhead.inception_b.html#arguments"},{"body":"Arguments nblocks : number of dense blocks between transitions growth_rate : the output feature map growth rate of dense blocks (i . e .   k  in the paper) reduction : the factor by which the number of feature maps is scaled across each transition nclasses : the number of output classes Create a DenseNet model with specified configuration .  Currently supported values are (121, 161, 169, 201) ( reference ) . Set  pretrain = true  to load the model with pre - trained weights for ImageNet . DenseNet  does not currently support pretrained weights . See also  Metalhead.densenet .","id":"docstrings/Metalhead.DenseNet.html#arguments"},{"body":"private   resnext   —   function Create a ResNeXt model ( reference ) .","id":"docstrings/Metalhead.resnext.html"},{"body":"private   fire   —   function Create a fire module ( reference ) .","id":"docstrings/Metalhead.fire.html"},{"body":"private   transition   —   function Create a DenseNet transition sequence ( reference ) .","id":"docstrings/Metalhead.transition.html"},{"body":"private   alexnet   —   function Create an AlexNet model ( reference ) .","id":"docstrings/Metalhead.alexnet.html"},{"body":"private   resnextblock   —   function Create a basic residual block as defined in the paper for ResNeXt ( reference ) .","id":"docstrings/Metalhead.resnextblock.html"},{"body":"public   AlexNet   —   struct Create a  AlexNet . See also  alexnet . AlexNet  does not currently support pretrained weights .","id":"docstrings/Metalhead.AlexNet.html"},{"body":"Arguments: inplanes : the number of input feature maps outplanes : the number of output feature maps cardinality : the number of groups to use for the convolution width : the number of feature maps in each group in the bottleneck downsample : set to  true  to downsample the input","id":"docstrings/Metalhead.resnextblock.html#arguments"},{"body":"private   inception_c   —   function Create an Inception - v3 style - C module (ref: Fig .  6 in  paper ) .","id":"docstrings/Metalhead.inception_c.html"},{"body":"public   SqueezeNet   —   struct Create a SqueezeNet ( reference ) . Set  pretrain=true  to load the model with pre - trained weights for ImageNet . SqueezeNet  does not currently support pretrained weights . See also  squeezenet .","id":"docstrings/Metalhead.SqueezeNet.html"},{"body":"Arguments inplanes : the number of input feature maps to the first dense block growth_rates : the growth rates of output feature maps within each dense_block  (a vector of vectors) reduction : the factor by which the number of feature maps is scaled across each transition nclasses : the number of output classes Create a DenseNet model ( reference ) .","id":"docstrings/Metalhead.densenet.html#arguments"},{"body":"private   vgg_convolutional_layers   —   function Create VGG convolution layers ( reference ) .","id":"docstrings/Metalhead.vgg_convolutional_layers.html"},{"body":"public   ResNet   —   struct Create a  ResNet  model ( reference ) . See also  resnet .","id":"docstrings/Metalhead.ResNet.html"},{"body":"Arguments block : a function with input  (inplanes, outplanes, downsample=false)  that returns a new residual block (see  Metalhead.basicblock  and  Metalhead.bottleneck ) residuals : a 2 - tuple of functions with input  (inplanes, outplanes, downsample=false) , each of which will return a function that will be used as a new  “ skip ”  path to match a residual block . Metalhead.skip_identity  and  Metalhead.skip_projection  can be used here . connection : the binary function applied to the output of residual and skip paths in a block channel_config : the growth rate of the output feature maps within a residual block block_config : a list of the number of residual blocks at each stage nclasses : the number of output classes Create a ResNet model ( reference ) .","id":"docstrings/Metalhead.resnet.html#arguments"},{"body":"Arguments pretrain : set to  true  to load the model with pre - trained weights for ImageNet nclasses : the number of output classes GoogLeNet  does not currently support pretrained weights . See also  googlenet .","id":"docstrings/Metalhead.GoogLeNet.html#arguments"},{"body":"private   resnet   —   function Create a ResNet model ( reference ) .","id":"docstrings/Metalhead.resnet.html"},{"body":"private   conv_bn   —   function Create a convolution + batch normalization pair with ReLU activation .","id":"docstrings/Metalhead.conv_bn.html"},{"body":"Arguments inplanes : number of input feature maps pool_proj : the number of output feature maps for the pooling projection","id":"docstrings/Metalhead.inception_a.html#arguments"},{"body":"Arguments config : vector of tuples  (output_channels, num_convolutions) for each block (see  Metalhead.vgg_block ) batchnorm : set to  true  to include batch normalization after each convolution inchannels : number of input channels","id":"docstrings/Metalhead.vgg_convolutional_layers.html#arguments"},{"body":"public   VGG   —   struct Construct a VGG model with the specified input image size .  Typically, the image size is  (224, 224) .","id":"docstrings/Metalhead.VGG.html"},{"body":"Arguments kernelsize : size of the convolution kernel (tuple) inplanes : number of input feature maps outplanes : number of output feature maps activation : the activation function for the final layer rev : set to  true  to place the batch norm before the convolution stride : stride of the convolution kernel pad : padding of the convolution kernel dilation : dilation of the convolution kernel groups : groups for the convolution kernel bias ,  weight ,  init : initialization for the convolution kernel (see  Flux.Conv ) initβ ,  initγ : initialization for the batch norm (see  Flux.BatchNorm ) ϵ ,  momentum : batch norm parameters (see  Flux.BatchNorm )","id":"docstrings/Metalhead.conv_bn.html#arguments"},{"body":"Arguments: inplanes : the number of input feature maps outplanes : a list of the number of output feature maps for each convolution within the residual block downsample : set to  true  to downsample the input","id":"docstrings/Metalhead.basicblock.html#arguments"},{"body":"private   vgg_block   —   function A VGG block of convolution layers ( reference ) .","id":"docstrings/Metalhead.vgg_block.html"}]